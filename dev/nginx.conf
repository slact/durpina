#!/bin/sh #good enough highlighting
#user  nobody;
worker_processes      20;
working_directory     ./;

worker_rlimit_core    1024M;
worker_rlimit_nofile  100000;
#debug_points stop;

error_log             /dev/stderr;

pid                   .pid;
daemon                off;

events {
  accept_mutex        on;
  accept_mutex_delay  20ms;
}

http {
  lua_package_path ";;";
  lua_shared_dict upstream  1m;
  lua_shared_dict monitor   1m;
  
  init_worker_by_lua_file "init.lua";
  
  access_log /dev/stdout;

  upstream simple_roundrobin {
    server localhost:8083;
    server 127.0.0.1:8084;
    server 127.0.0.1:8085;
    balancer_by_lua_block {
      require "durpina.balancer" "round-robin"
    }
  }
  
    upstream weighted_roundrobin {
      server localhost:8083 weight=1 fail_timeout=2;
      server 127.0.0.1:8084 weight=10 fail_timeout=2;
      server 127.0.0.1:8085 weight=15 fail_timeout=2;
      balancer_by_lua_block {
        require "durpina.balancer" "round-robin"
      }
    }
    
    upstream reweighted_roundrobin {
      server 127.0.0.1:8083 weight=10;
      server 127.0.0.1:8084 weight=20;
      server 127.0.0.1:8085 weight=30;
      balancer_by_lua_block {
        require "durpina.balancer" "round-robin"
      }
    }
  
  server {
    listen       8082;
    listen       unix:/tmp/durpina-test.socket;
    default_type "text/plain";
    
    location /ready {
      content_by_lua_block {
        ngx.say("ready")
      }
    }
    location ~/set_peer_weight/(.*) {
      content_by_lua_block {
        local cjson = require "cjson"
        local Upstream = require "durpina.upstream"
        local up, err = Upstream.get(ngx.var[1])
        if not up then
          ngx.status = 404
          return ngx.say(err)
        end
        ngx.req.read_body()
        local data_in = ngx.req.get_body_data() or ""
        local ok, data = pcall(cjson.decode, data_in)
        if not ok then
          ngx.status = 404
          return ngx.say("Error parsing JSON data: " .. data)
        end
        for peername, weight in pairs(data) do
          local peer = up:get_peer(peername)
          if not peer then 
            ngx.status = 404
            return ngx.say("peer " .. peername .." not found in upstream " .. up.name)
          end
          peer:set_weight(weight)
        end
        print(tostring(up))
        return ngx.say(tostring(up))
      }
    }
 
    location = /simple_roundrobin {
      proxy_pass http://simple_roundrobin;
    }
    
    location = /weighted_roundrobin {
      proxy_pass http://weighted_roundrobin;
    }
    
    location = /reweighted_roundrobin {
      proxy_pass http://reweighted_roundrobin;
    }
 
  }
}
